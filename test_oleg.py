import requests
import json
from qdrant_client import QdrantClient
from qdrant_client.http import models

class SimpleRAGClient:
    def __init__(self, qdrant_url: str, qdrant_api_key: str = None, 
                 collection_name: str = "", 
                 ollama_url: str = "http://", 
                 ollama_model: str = "",
                 embed_model: str = ""):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∫–ª–∏–µ–Ω—Ç–∞ —Å Qdrant –ø–æ URL
        
        Args:
            qdrant_url: URL Qdrant —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "http://localhost:6333")
            qdrant_api_key: API –∫–ª—é—á Qdrant (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            collection_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            ollama_url: URL Ollama —Å–µ—Ä–≤–µ—Ä–∞
            ollama_model: –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            embed_model: –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qdrant –∫–ª–∏–µ–Ω—Ç–∞
        self.client = QdrantClient(
            url=qdrant_url,
            api_key=qdrant_api_key,
            timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        self.collection_name = collection_name
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama
        self.ollama_url = ollama_url
        self.ollama_model = ollama_model
        self.embed_model = embed_model
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self._check_connections()
    
    def _check_connections(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Qdrant –∏ Ollama"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
        try:
            health = self.client.get_liveness()
            print(f"‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω: {health}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.client.get_collections()
            collection_names = [col.name for col in collections.collections]
            if self.collection_name in collection_names:
                print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.collection_name}' –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è '{self.collection_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_names}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=10)
            if response.status_code == 200:
                models = response.json().get('models', [])
                print(f"‚úÖ Ollama –ø–æ–¥–∫–ª—é—á–µ–Ω. –ú–æ–¥–µ–ª–∏: {[m['name'] for m in models]}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama: {e}")
    
    def get_embedding(self, text: str):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑ Ollama
        """
        payload = {
            "model": self.embed_model,
            "prompt": text
        }
        
        try:
            response = requests.post(
                f"{self.ollama_url}/api/embeddings",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json().get('embedding', [])
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return []
    
    def search_similar(self, query: str, limit: int = 5, score_threshold: float = 0.5):
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –∏–∑ Ollama"""
        query_embedding = self.get_embedding(query)
        
        if not query_embedding:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            return []
        
        try:
            search_result = self.client.search(
                collection_name=self.collection_name,
                query_vector=query_embedding,
                limit=limit,
                score_threshold=score_threshold
            )
            
            return search_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {e}")
            return []
    
    def retrieve_context(self, query: str, limit: int = 3, min_score: float = 0.6):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã"""
        results = self.search_similar(query, limit, min_score)
        
        if not results:
            print("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return ""
        
        context_parts = []
        for result in results:
            if result.payload and result.score >= min_score:
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                text = (result.payload.get('text') or 
                        result.payload.get('content') or 
                        result.payload.get('document') or 
                        str(result.payload))
                if text:
                    source = result.payload.get('source', 'Unknown')
                    score = f"{result.score:.3f}"
                    context_parts.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫: {source}, —Å—Ö–æ–∂–µ—Å—Ç—å: {score}] {text}")
        
        return "\n\n".join(context_parts)
    
    def generate_with_ollama(self, prompt: str, context: str = ""):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Ollama"""
        if not context:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."
        
        full_prompt = f"""–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å: {prompt}

–û—Ç–≤–µ—Ç:"""
        
        payload = {
            "model": self.ollama_model,
            "prompt": full_prompt,
            "stream": False,
            "options": {
                "temperature": 0.1,
                "top_p": 0.9,
                "num_ctx": 4096
            }
        }
        
        try:
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json=payload,
                timeout=120
            )
            
            if response.status_code == 200:
                return response.json().get('response', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')
            else:
                return f"–û—à–∏–±–∫–∞ Ollama: {response.status_code}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}"
    
    def ask_question(self, query: str, limit_context: int = 3, min_score: float = 0.6):
        """
        –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª RAG: –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        """
        print(f"üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è: '{query}'")
        context = self.retrieve_context(query, limit_context, min_score)
        
        if not context:
            return {
                "question": query,
                "answer": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.",
                "context": "",
                "context_sources": [],
                "found_documents": 0
            }
        
        print("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å Ollama...")
        answer = self.generate_with_ollama(query, context)
        
        return {
            "question": query,
            "answer": answer,
            "context": context,
            "context_sources": self._extract_sources(context),
            "found_documents": len(context.split('\n\n')) if context else 0
        }
    
    def _extract_sources(self, context: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        sources = []
        lines = context.split('\n')
        for line in lines:
            if line.startswith('[–ò—Å—Ç–æ—á–Ω–∏–∫:'):
                source = line.split(',')[0].replace('[–ò—Å—Ç–æ—á–Ω–∏–∫:', '').strip()
                if source and source not in sources:
                    sources.append(source)
        return sources

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class QuickRAG:
    def __init__(self, qdrant_url: str, qdrant_api_key: str = None,
                 ollama_model: str = "llama2",
                 embed_model: str = "mxbai-embed-large"):
        self.client = QdrantClient(url=qdrant_url, api_key=qdrant_api_key)
        self.ollama_url = "http://localhost:11434"
        self.ollama_model = ollama_model
        self.embed_model = embed_model
    
    def get_embedding(self, text: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑ Ollama"""
        try:
            response = requests.post(
                f"{self.ollama_url}/api/embeddings",
                json={"model": self.embed_model, "prompt": text},
                timeout=30
            )
            return response.json().get('embedding', []) if response.status_code == 200 else []
        except:
            return []
    
    def ask(self, question: str, top_k: int = 3):
        """–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏ –ø–æ–∏—Å–∫
        embedding = self.get_embedding(question)
        if not embedding:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"
        
        try:
            results = self.client.search(
                collection_name="my_collection",
                query_vector=embedding,
                limit=top_k,
                score_threshold=0.5
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = "\n".join([
                f"- {hit.payload.get('text', hit.payload.get('content', ''))} (—Å—Ö–æ–∂–µ—Å—Ç—å: {hit.score:.3f})" 
                for hit in results if hit.payload and hit.score > 0.5
            ])
            
            if not context:
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            prompt = f"""–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç:"""
            
            response = requests.post(
                f"{self.ollama_url}/api/generate",
                json={
                    "model": self.ollama_model,
                    "prompt": prompt,
                    "stream": False
                },
                timeout=60
            )
            
            if response.status_code == 200:
                answer = response.json().get('response', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
                return f"ü§ñ –û—Ç–≤–µ—Ç: {answer}\n\nüìö –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(results)}"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code}"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ Qdrant: {e}"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å Qdrant –ø–æ URL
    rag_client = SimpleRAGClient(
        qdrant_url="http://",  # –∏–ª–∏ –≤–∞—à URL Qdrant
        collection_name="",
        ollama_model="",
        embed_model=""
    )
    
    # –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
    question = "–∫–∞–∫–∞—è —Ñ–∏—Ä–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç '–î—É–≥–æ–≥–∞—Å–Ω–∏–π —Ä–µ–∞–∫—Ç–æ—Ä 35 –∫–í —Ç–∏–ø—É ASRC 2500'"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    result = rag_client.ask_question(question)
    
    print("=" * 60)
    print(f"‚ùì –í–æ–ø—Ä–æ—Å: {result['question']}")
    print("=" * 60)
    print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['answer']}")
    print("=" * 60)
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result['found_documents']}")
    if result['context']:
        print("–ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(result['context'][:300] + "..." if len(result['context']) > 300 else result['context'])
    print("=" * 60)
    print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {result['context_sources']}")
